{"version":3,"file":"static/js/884.977fe47e.chunk.js","mappings":"sPAEMA,EAAS,mCAAG,WAAMC,GAAN,gFACVC,EADU,6CACkCD,EADlC,sFAISE,EAAAA,EAAAA,IAAUD,GAJnB,WAIRE,EAJQ,QAMAC,KANA,sBAON,IAAIC,MAPE,gCAUPF,EAASC,MAVF,kCAYdE,QAAQC,IAAI,KAAMC,SAZJ,0DAAH,sDAef,I,2BCkCA,EA7Ca,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,YAAhC,eAAOR,EAAP,KAAiBS,EAAjB,KAcA,IAZAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,QAAAA,YACAf,EAAUU,GACPM,MAAK,SAAAZ,GAAQ,OAAIS,EAAYT,EAAhB,IACbY,KACEC,OAAOC,OAAS,WACfH,EAAAA,QAAAA,QACD,GAEFI,OACJ,GAAE,CAACT,IAEAN,EACF,OACE,wBACGA,EAASgB,KAAKC,KACb,YAAwC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAClB,OACE,2BACE,gBACEC,QAAQ,OACRC,MAAO,IACPC,OAAQ,IACRC,IACEJ,EAAY,6CAC8BA,GACtC,kDAENK,IAAKzB,EAAS0B,WAEhB,uBAAIR,KACJ,uCAAeC,QAbRQ,EAAAA,EAAAA,MAgBZ,KAKV,C,uDChDM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACnC,EAAIoC,GAWvD,OAREpC,IAFFoC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["services/fetch-cast.js","components/Cast.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst fetchCast = async id => {\n  const url = `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US&api_key=8cf662758bc2884725173cf48e8fe898`;\n\n  try {\n    const response = await axios.get(url);\n\n    if (!response.data) {\n      throw new Error();\n    }\n    // console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport default fetchCast;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchCast from 'services/fetch-cast';\nimport { nanoid } from 'nanoid';\nimport { Loading } from 'notiflix';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [response, setResponse] = useState();\n\n  useEffect(() => {\n    Loading.hourglass();\n    fetchCast(movieId)\n      .then(response => setResponse(response))\n      .then(\n        (window.onload = () => {\n          Loading.remove();\n        }),\n      )\n      .catch();\n  }, [movieId]);\n\n  if (response) {\n    return (\n      <ul>\n        {response.cast.map(\n          ({ name, character, profile_path }) => {\n            return (\n              <li key={nanoid()}>\n                <img\n                  loading=\"lazy\"\n                  width={150}\n                  height={225}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/original${profile_path}`\n                      : 'https://placehold.co/150x225?text=not+available'\n                  }\n                  alt={response.tagline}\n                />\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </li>\n            );\n          },\n        )}\n      </ul>\n    );\n  }\n};\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["fetchCast","id","url","axios","response","data","Error","console","log","message","movieId","useParams","useState","setResponse","useEffect","Loading","then","window","onload","catch","cast","map","name","character","profile_path","loading","width","height","src","alt","tagline","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}