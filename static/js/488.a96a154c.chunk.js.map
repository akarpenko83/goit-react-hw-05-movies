{"version":3,"file":"static/js/488.a96a154c.chunk.js","mappings":"+PAEMA,EAAY,mCAAG,WAAMC,GAAN,gFACbC,EADa,6CAC+BD,EAD/B,sFAIME,EAAAA,EAAAA,IAAUD,GAJhB,WAIXE,EAJW,QAMHC,KAAKC,QANF,sBAOT,IAAIC,MAPK,gCAUVH,EAASC,KAAKC,SAVJ,kCAYjBE,QAAQC,IAAI,KAAMC,SAZD,0DAAH,sDAelB,I,kBC0BA,EApCgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,YAAhC,eAAOT,EAAP,KAAiBU,EAAjB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,QAAAA,SACAhB,EAAaW,GACVM,MAAK,SAAAb,GAAQ,OAAIU,EAAYV,EAAhB,IACba,KACEC,OAAOC,OAAS,WACfH,EAAAA,QAAAA,QACD,GAEFI,OACJ,GAAE,CAACT,IAEAP,GACFI,QAAQC,IAAIL,EAASiB,SAEnB,wBACGjB,EAASkB,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACvB,OACE,2BACE,oCAAYD,MACZ,uBAAIC,OAFGC,EAAAA,EAAAA,MAKZ,QAKL,qEAEH,C,uDCxCM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC7B,EAAI8B,GAWvD,OARE9B,IAFF8B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["services/fetch-reviews.js","components/Reviews.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst fetchReviews = async id => {\n  const url = `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&api_key=8cf662758bc2884725173cf48e8fe898`;\n\n  try {\n    const response = await axios.get(url);\n\n    if (!response.data.results) {\n      throw new Error();\n    }\n    // console.log(response.data.results);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport default fetchReviews;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { nanoid } from 'nanoid';\nimport fetchReviews from 'services/fetch-reviews';\nimport { Loading } from 'notiflix';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [response, setResponse] = useState();\n\n  useEffect(() => {\n    Loading.arrows();\n    fetchReviews(movieId)\n      .then(response => setResponse(response))\n      .then(\n        (window.onload = () => {\n          Loading.remove();\n        }),\n      )\n      .catch();\n  }, [movieId]);\n\n  if (response) {\n    console.log(response.length);\n    return (\n      <ul>\n        {response.map(({ author, content }) => {\n          return (\n            <li key={nanoid()}>\n              <p>Author: {author}</p>\n              <p>{content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n  return (\n    <div>We don`t have any reviews for this movie</div>\n  );\n};\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["fetchReviews","id","url","axios","response","data","results","Error","console","log","message","movieId","useParams","useState","setResponse","useEffect","Loading","then","window","onload","catch","length","map","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}